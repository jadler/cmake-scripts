SET (VERSION_SHORT "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}")
SET (VERSION_FULL "${VERSION_SHORT}-${VERSION_TWEAK}")
SET (GENERIC_LIB_VERSION ${VERSION_SHORT})
STRING (SUBSTRING ${VERSION_SHORT} 0 1 GENERIC_LIB_SOVERSION)

IF (NOT DEFINED PROJECT_NAME)
	# Atribui o nome do diretório à variável ${PROJECT_NAME}, esta variável
	# é criada pala macro PROJECT().
	GET_FILENAME_COMPONENT (PROJECT_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME)
	SET (PROJECT_NAME ${PROJECT_NAME} CACHE STRING "Default project name")
	MESSAGE (WARNING "PROJECT_NAME not defined, using root directory as default name.")
ENDIF()

MESSAGE (STATUS "Building project ${PROJECT_NAME} version ${VERSION_SHORT}")

PROJECT (${PROJECT_NAME} VERSION ${VERSION_SHORT} LANGUAGES C CXX)

IF (EXISTS "${CMAKE_SOURCE_DIR}/Dependencies.cmake")
	MESSAGE (STATUS "${CMAKE_SOURCE_DIR}/Dependencies.cmake found")
	INCLUDE (Dependencies.cmake)
ENDIF()

IF (NOT DEFINED PROJECT_TYPE)
	SET (PROJECT_TYPE "Library" CACHE STRING "Default artifact build type")
	MESSAGE (WARN "PROJECT_TYPE not defined, setting default value: '${PROJECT_TYPE}'")
ENDIF ()

MESSAGE (STATUS "Building project as ${PROJECT_TYPE}")
INCLUDE (${CMAKE_CURRENT_LIST_DIR}/build-type/${PROJECT_TYPE}.cmake)
TARGET_LINK_LIBRARIES (${PROJECT_NAME} ${EXTERNAL_LIBS})

#TARGET_COMPILE_FEATURES (${PROJECT_NAME}
#	PUBLIC
#	PRIVATE )

INSTALL (
	TARGETS ${PROJECT_NAME}
	EXPORT ${PROJECT_NAME}Config
	RUNTIME
		DESTINATION bin
		COMPONENT applications
	LIBRARY
		DESTINATION lib
		COMPONENT libraries
	ARCHIVE
		DESTINATION lib
		COMPONENT libraries)

INSTALL (
	DIRECTORY include/
	COMPONENT headers
	DESTINATION include)

INSTALL (
	EXPORT ${PROJECT_NAME}Config
	FILE "${PROJECT_NAME}Config.cmake"
	COMPONENT libraries
	DESTINATION lib/cmake/${PROJECT_NAME}-${VERSION_SHORT})

# Somente executa os testes se o projeto não for do tipo Header
# e contiver um diretório test
IF (NOT ${PROJECT_TYPE} MATCHES "Header" AND EXISTS ${CMAKE_SOURCE_DIR}/test)
	ENABLE_TESTING()
	INCLUDE (CTest)
ENDIF()

INCLUDE (${CMAKE_CURRENT_LIST_DIR}/NSISCPackConfig.cmake) # Para 
