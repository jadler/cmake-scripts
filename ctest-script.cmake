FIND_PROGRAM (CTEST_COVERAGE_COMMAND NAMES gcov)
FIND_PROGRAM (CTEST_MEMORYCHECK_COMMAND NAMES valgrind)
FIND_PROGRAM (CTEST_GIT_COMMAND NAMES git)

SET (CTEST_SOURCE_DIRECTORY "/path/to/project")
SET (CTEST_BINARY_DIRECTORY "${CTEST_SOURCE_DIRECTORY}/build")

IF (NOT EXISTS "${CTEST_SOURCE_DIRECTORY}")
  SET (CTEST_CHECKOUT_COMMAND "${CTEST_GIT_COMMAND} clone git://git.server/project.git ${CTEST_SOURCE_DIRECTORY}")
ENDIF ()
SET (CTEST_UPDATE_COMMAND "${CTEST_GIT_COMMAND}")

SET (CTEST_BUILD_CONFIGURATION "Debug")

SET (CMAKE_EXTRA_ARGS "${CMAKE_EXTRA_ARGS} -DCMAKE_BUILD_TYPE=${CTEST_BUILD_CONFIGURATION}")
SET (CMAKE_EXTRA_ARGS "${CMAKE_EXTRA_ARGS} -DTARGET_TYPE=Library")
# SET (CMAKE_EXTRA_ARGS "${CMAKE_EXTRA_ARGS} -DPROJECT_NAME=${pkgname}")
# SET (CMAKE_EXTRA_ARGS "${CMAKE_EXTRA_ARGS} -DVERSION_MAJOR=${VERSION[0]}")
# SET (CMAKE_EXTRA_ARGS "${CMAKE_EXTRA_ARGS} -DVERSION_MINOR=${VERSION[1]}")
# SET (CMAKE_EXTRA_ARGS "${CMAKE_EXTRA_ARGS} -DVERSION_PATCH=${VERSION[2]}")
# SET (CMAKE_EXTRA_ARGS "${CMAKE_EXTRA_ARGS} -DVERSION_TWEAK=${VERSION[3]}")

SET (CTEST_CMAKE_COMMAND "cmake ${CMAKE_EXTRA_ARGS}")
SET (CTEST_COMMAND "ctest -D Experimental")

SET (CTEST_START_WITH_EMPTY_BINARY_DIRECTORY TRUE)

SET (CTEST_ENVIRONMENT
  "GTEST_COLOR=1"
  "CTEST_OUTPUT_ON_FAILURE=1"
)
